name: xyz-bank-ci
run-name: Cross-Browser Testing with Allure

on:
  push:
    branches: [ xyz-bank-app ]
    paths-ignore:
      - '.github/badges/**'

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        browser: [chrome, firefox, edge]
      fail-fast: false

    steps:
      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      # Setup Java
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Cache Maven dependencies
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Browser-specific setup (since you mentioned auto-setup dependency, these are lightweight)
      - name: Setup Chrome
        if: matrix.browser == 'chrome'
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable

      - name: Setup Firefox
        if: matrix.browser == 'firefox'
        uses: browser-actions/setup-firefox@v1

      - name: Setup Edge
        if: matrix.browser == 'edge'
        uses: browser-actions/setup-edge@v1

      # Run tests with browser-specific configuration
      - name: Run tests - ${{ matrix.browser }}
        run: |
          set +e
          mvn clean test \
            -Dbrowser=${{ matrix.browser }} \
            -Pcross-browser \
            -Djacoco.destFile=target/jacoco-${{ matrix.browser }}.exec
          echo "TEST_EXIT_CODE=$?" >> $GITHUB_ENV
          set -e
        continue-on-error: true

      # Generate browser custom test badge
      - name: Generate ${{ github.workflow }}-${{ matrix.browser }} test badge
        run: |
          mkdir -p ".github/badges"
          
          TOTAL=0
          for val in $(xmllint --xpath "count(//testcase)" "target/surefire-reports-${{ matrix.browser }}"/*.xml 2>/dev/null); do
            TOTAL=$((TOTAL + val))
          done
          
          FAILS=0
          for val in $(xmllint --xpath "count(//testcase[failure or error])" "target/surefire-reports-${{ matrix.browser }}"/*.xml 2>/dev/null); do
            FAILS=$((FAILS + val))
          done
  
          PASSED=$((TOTAL - FAILS))
          
          if [ "$TOTAL" -gt 0 ]; then
            PERCENT=$((100 * PASSED / TOTAL))
          else
            PERCENT=0
          fi
          
          if [ "$PERCENT" -ge 90 ]; then
            COLOR="brightgreen"
          elif [ "$PERCENT" -ge 70 ]; then
            COLOR="yellow"
          else
            COLOR="red"
          fi
  
          echo "{\"schemaVersion\":1,\"label\":\"${{ matrix.browser }}\",\"message\":\"$PASSED/$TOTAL ($PERCENT%)\",\"color\":\"brightgreen\"}" > ".github/badges/${{ github.workflow }}-${{ matrix.browser }}.json"
          

      # Set up git local user
      - name: Setup git user
        continue-on-error: true
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      # Pull out latest changes
      - name: Pull latest changes
        continue-on-error: true
        run: |
          git pull --rebase origin ${{ github.ref_name }}

      # Commit browser custom test badge
      - name: Commit ${{ github.workflow }}-${{ matrix.browser }} badge
        uses: EndBug/add-and-commit@v9
        continue-on-error: true
        with:
          message: "[skip ci] Update ${{ github.workflow }}-${{ matrix.browser }} test badge"
          add: ".github/badges/${{ github.workflow }}-${{ matrix.browser }}.json"

      # Upload coverage report for each browser
      - name: Upload JaCoCo report - ${{ matrix.browser }}
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: jacoco-${{ matrix.browser }}
          path: target/jacoco-${{ matrix.browser }}.exec

      # Upload browser-specific results
      - name: Upload Allure results - ${{ matrix.browser }}
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-results-${{ matrix.browser }}
          path: target/allure-results/
          retention-days: 7

      # Upload screenshots on failure
      - name: Upload screenshots - ${{ matrix.browser }}
        uses: actions/upload-artifact@v4
        if: ${{ env.TEST_EXIT_CODE }} != '0'
        with:
          name: screenshots-${{ matrix.browser }}
          path: screenshots/
          retention-days: 7

      # Set status icons for Slack notification
      - name: Set success icon
        if: ${{ env.TEST_EXIT_CODE }} == '0'
        run: 'echo "SLACK_STATUS_ICON=:white_check_mark: PASSED" >> $GITHUB_ENV'

      - name: Set failure icon
        if: ${{ env.TEST_EXIT_CODE }} != '0'
        run: 'echo "SLACK_STATUS_ICON=:x: FAILED" >> $GITHUB_ENV'

      - name: Set cancellation icon
        if: cancelled()
        run: 'echo "SLACK_STATUS_ICON=:warning: CANCELLED" >> $GITHUB_ENV'

      # Send Slack notification on job completion
      - name: Slack Notification - Job Finished
        if: always()
        uses: slackapi/slack-github-action@v2.1.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
            blocks:
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "*${{ matrix.browser }} Test Results:* ${{ env.SLACK_STATUS_ICON }}"
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "Browser: _${{ matrix.browser }}_\n Workflow: _${{ github.workflow }}_\n Status: `${{ job.status }}`"
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "Branch: _${{ github.ref }}_\nCommit: `${{ github.sha }}`\n:link: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View workflow run>"

  # Generate combined Allure report
  generate-allure-report:
    runs-on: ubuntu-latest
    needs: test
    if: always()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Download all browser results
      - name: Download Chrome results
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: allure-results-chrome
          path: allure-results/chrome/

      - name: Download Firefox results
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: allure-results-firefox
          path: allure-results/firefox/

      - name: Download Edge results
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: allure-results-edge
          path: allure-results/edge/

      # Combine results from all browsers
      - name: Combine Allure results
        run: |
          mkdir -p combined-results
          # Copy results from each browser, handling cases where some may not exist
          for browser in chrome firefox edge; do
            if [ -d "allure-results/$browser" ]; then
              echo "Copying results from $browser..."
              cp -r allure-results/$browser/* combined-results/ 2>/dev/null || true
            else
              echo "No results found for $browser"
            fi
          done
          # List combined results for verification
          echo "Combined results:"
          ls -la combined-results/ || echo "No combined results found"

      # Get Allure history for trending
      - name: Get Allure history
        uses: actions/checkout@v4
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      # Generate combined Allure report
      - name: Generate Allure Report
        uses: simple-elf/allure-report-action@master
        if: always()
        with:
          allure_results: combined-results
          allure_history: allure-history
          keep_reports: 20

      # Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-history
          force_orphan: true

      # Set report generation status
      - name: Set report success icon
        if: success()
        run: 'echo "REPORT_STATUS_ICON=:white_check_mark: REPORT GENERATED" >> $GITHUB_ENV'

      - name: Set report failure icon
        if: failure()
        run: 'echo "REPORT_STATUS_ICON=:x: REPORT FAILED" >> $GITHUB_ENV'

      - name: Set report cancellation icon
        if: cancelled()
        run: 'echo "REPORT_STATUS_ICON=:warning: REPORT CANCELLED" >> $GITHUB_ENV'

      # Send final Slack notification with report status
      - name: Slack Notification - Report Generation Finished
        if: always()
        uses: slackapi/slack-github-action@v2.1.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
            blocks:
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "*Allure Report Status:* ${{ env.REPORT_STATUS_ICON }}"
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "Workflow: _${{ github.workflow }}_\n Branch: _${{ github.ref }}_\n:globe_with_meridians: <https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}|View Allure Report>\n:link: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View workflow run>"

  generate-coverage-report:
    runs-on: ubuntu-latest
    needs: test
    if: always()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Download all jacoco exec files
      - name: Download Chrome exec
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: jacoco-chrome
          path: target/jacoco-files

      - name: Download Firefox exec
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: jacoco-firefox
          path: target/jacoco-files

      - name: Download Edge exec
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: jacoco-edge
          path: target/jacoco-files

      # Merge exec files
      - name: Merge JaCoCo exec files
        run: mvn jacoco:merge

      # Generate a report from merged exec
      - name: Generate merged JaCoCo report
        run: |
          mvn compile jacoco:report
          ls -R target

      # Upload merged XML to Coveralls
      - name: Upload coverage report to Coveralls
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: target/site/jacoco/jacoco.xml

      # Set report generation status
      - name: Set report success icon
        if: success()
        run: 'echo "COVERALLS_STATUS_ICON=:white_check_mark: REPORT GENERATED" >> $GITHUB_ENV'

      - name: Set report failure icon
        if: failure()
        run: 'echo "COVERALLS_STATUS_ICON=:x: REPORT FAILED" >> $GITHUB_ENV'

      - name: Set report cancellation icon
        if: cancelled()
        run: 'echo "COVERALLS_STATUS_ICON=:warning: REPORT CANCELLED" >> $GITHUB_ENV'

      # Send final Slack notification with coverage report status
      - name: Slack Notification - Report Generation Finished
        if: always()
        uses: slackapi/slack-github-action@v2.1.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
            blocks:
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "*Coverage Report Status:* ${{ env.COVERALLS_STATUS_ICON }}"
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "Workflow: _${{ github.workflow }}_\nBranch: _${{ github.ref }}_\n:link: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View workflow run>"
