name: CI

on:
  pull_request:
    branches:
      - main

permissions:
  pull-requests: write
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Slack Notification - Job Started
        uses: slackapi/slack-github-action@v2.1.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
            blocks:
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: ":hourglass_flowing_sand: *${{ github.workflow }} - ${{ github.job }} Job has Started*"
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: ":link: *<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View workflow run>*"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Run tests and generate coverage
        run: mvn clean verify
        continue-on-error: true

      - name: Upload coverage report
        uses: coverallsapp/github-action@v2
        continue-on-error: true
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: target/site/jacoco/jacoco.xml

      - name: Extract coverage table
        id: coverage_summary
        run: |
          echo "Installing dependencies for parsing coverage summary"
          sudo apt-get update
          sudo apt-get install -y libxml2-utils tidy
          
          # Check if JaCoCo report exists
          if [ ! -f "target/site/jacoco/index.html" ]; then
            echo "Error: JaCoCo report not found at target/site/jacoco/index.html"
            exit 1
          fi
          
          echo "Extract coverage summary table"
          tidy -quiet -asxhtml target/site/jacoco/index.html 2>/dev/null | \
            xmllint --html --xpath "//table[1]" - 2>/dev/null | \
            perl -pe 's/<(\w+)[^>]*>/<\1>/g' > coverage-table.html
          
          # Verify we got some content
          if [ ! -s coverage-table.html ]; then
            echo "Error: Failed to extract coverage table"
            exit 1
          fi
          
          echo "Store the extracted coverage summary table for GitHub Actions output"
          {
            echo 'table<<EOF'
            cat coverage-table.html
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: Generate JaCoCo badge
        uses: cicirello/jacoco-badge-generator@v2
        continue-on-error: true
        with:
          jacoco-csv-file: target/site/jacoco/jacoco.csv

      - name: Check for existing coverage comment
        id: existing_comment
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Look for existing coverage comment
          COMMENT_ID=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/issues/$PR_NUMBER/comments \
            --jq '.[] | select(.body | contains("## ✅ Code Coverage")) | .id' | head -1)
          
          echo "existing_comment_id=$COMMENT_ID" >> "$GITHUB_OUTPUT"

      - name: Post or update coverage summary comment
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Prepare comment body
          TABLE="${{ steps.coverage_summary.outputs.table }}"
          EXISTING_COMMENT_ID="${{ steps.existing_comment.outputs.existing_comment_id }}"
          
          # Create the comment body
          COMMENT_BODY="## ✅ Test Coverage Summary
          
          "
          
          # Add badge from Coveralls if repo info is available
          ORG="${GITHUB_REPOSITORY_OWNER}"
          REPO=$(basename "$GITHUB_REPOSITORY")
          BRANCH="${GITHUB_HEAD_REF:-${GITHUB_REF_NAME}}"
          
          COVERALLS_BADGE="https://coveralls.io/repos/github/$ORG/$REPO/badge.svg?branch=$BRANCH"
        
          COMMENT_BODY="$COMMENT_BODY![Coverage Status]($COVERALLS_BADGE)
          
          ### Detailed Coverage Report
          $TABLE
          
          ---
          *Coverage report generated on $(date)*"
          
          # Create JSON payload using here-doc to avoid shell escaping issues
          cat << EOF > /tmp/comment_payload.json
          {
            "body": $(echo "$COMMENT_BODY" | jq -Rs .)
          }
          EOF
          
          # Update existing comment or create new one
          if [ -n "$EXISTING_COMMENT_ID" ]; then
            echo "Updating existing comment ID: $EXISTING_COMMENT_ID"
            gh api \
              --method PATCH \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "/repos/${{ github.repository }}/issues/comments/$EXISTING_COMMENT_ID" \
              --input /tmp/comment_payload.json
          else
            echo "Creating new coverage comment"
            gh api \
              --method POST \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "/repos/${{ github.repository }}/issues/$PR_NUMBER/comments" \
              --input /tmp/comment_payload.json
          fi
          
          rm -f /tmp/comment_payload.json

      - name: Set success icon
        if: success()
        run: 'echo "SLACK_STATUS_ICON=:white_check_mark: PASSED" >> $GITHUB_ENV'

      - name: Set failure icon
        if: failure()
        run: 'echo "SLACK_STATUS_ICON=:x: FAILED" >> $GITHUB_ENV'

      - name: Set cancellation icon
        if: cancelled()
        run: 'echo "SLACK_STATUS_ICON=:warning: CANCELLED" >> $GITHUB_ENV'

      - name: Slack Notification - Job Finished
        if: always()
        uses: slackapi/slack-github-action@v2.1.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
            blocks:
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: ":rocket: *CI Test Results:* ${{ env.SLACK_STATUS_ICON }}"
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: ":gear: *CI Workflow:* `${{ github.workflow }}`\n  :wrench: *Job:* `${{ github.job }}`\n  :bar_chart: *Status: `${{ job.status }}`*"
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: ":herb: *Branch:* `${{ github.ref }}`\n  :memo: *Commit:* `${{ github.sha }}`\n  :bust_in_silhouette: *Author:* `${{ github.actor }}`"
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: ":speech_balloon: *Commit message:* `${{ github.event.head_commit.message }}`"
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: ":link: *<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View workflow run>*"
